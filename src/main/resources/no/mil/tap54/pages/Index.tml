<html t:type="layout" title="Welcome!" xmlns:t="http://tapestry.apache.org/schema/tapestry_5_4.xsd">


<div class="hero-unit">
	<div class="row">
		<div class="col-md-8">
			<h3>${message:greeting}</h3>
			<p>Different techniques to easily include different javascript libraries/framework in Tapestry 5.4.</p>
			<p><small>(Sorry for the lack of indention of the code listings - problems with prettify/bootstrap)</small></p>
		</div>
		<div class="col-md-4">
			<img src="${asset:context:images/tapestry.png}" alt="${message:greeting}" title="${message:greeting}" height="80" />
		</div>
	</div>
</div>

<div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
	<div class="panel panel-default">
		<div class="panel-heading" role="tab" id="headingAngular">
			<h4 class="panel-title">
				<a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseAngular" aria-expanded="true"
					aria-controls="collapseAngular"> AngularJS </a>
			</h4>
		</div>
		<div id="collapseAngular" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingAngular">
			<div class="panel-body">
				<p>
					<t:pagelink page="NgTodo" class="btn btn-primary btn-large">Run AngularJS TodoApp &raquo;</t:pagelink>
					&nbsp;
					<t:pagelink page="NgPhones" class="btn btn-primary btn-large">Run AngularJS PhoneApp &raquo;</t:pagelink>
				</p>
				Eksample code is reused from <a href="https://angularjs.org" target="_blank">https://angularjs.org</a>
				<ul>
					<li>Download <em>angular.js</em> from <a href="https://angularjs.org/" target="_blank">https://angularjs.org</a>
						and place the file in <em>src/main/resources/META-INF/modules/angular.js</em>. The example is using version 1.4.4
					</li>
					<li>Create a file <em>src/main/resources/META-INF/modules/angular-bootstrap.js</em> that bootstrap angular and
						your own angular code
					</li>
					<li>Create a file <em>src/main/resources/META-INF/modules/my-angular-code.js</em> which is your angular code
					</li>
					<li>Create a file <em>src/main/resources/META-INF/assets/my-angular-code.css</em> for decoration
					</li>
					<li>Import <em>angular-bootstrap.js</em> and <em>my-angular-code.css</em> in your class-file: 
						<span class="badge">
							<em>@Import(module = { "angular-bootstrap" }, stylesheet = { "my-angular-code.css" })</em></span>
					</li>
				</ul>
				<p>
					That's it! Hava a look at the source-code for <span class="badge"><em>angular-bootstrap.js</em></span>
					and <span class="badge"><em>my-angular-code.js</em></span>
				</p>
				<pre class="prettyprint linenums" style="white-space: pre;">
					(function() {
						'use strict';
						require.config({
							paths : {
								'angular' : 'angular',
								'todoApp' : 'my-angular-code'
							},
							shim : {
								'angular' : {
									'exports' : 'angular'
								},
								'todoApp' : {
									'exports' : 'todoApp',
									deps : [ 'angular' ]
								}
							}
						});
						define([ 'angular', 'todoApp' ], function(angular) {
							angular.bootstrap(angular.element("body"), [ 'todoApp' ]);
						});
					}());
      			</pre>
				<pre class="prettyprint linenums">
					define([ 'angular' ], function(angular) {
						angular.module('todoApp', []).controller('TodoListController', function() {
							var todoList = this;
							todoList.todos = [ {
								text : 'Start with Tapestry 5.4',
								done : true
							}, {
								text : 'Get angular',
								done : true
							}, {
								text : 'Build a Tapestry/Angular app',
								done : false
							} ];
					
							todoList.addTodo = function() {
								todoList.todos.push({
									text : todoList.todoText,
									done : false
								});
								todoList.todoText = '';
							};
					
							todoList.remaining = function() {
								var count = 0;
								angular.forEach(todoList.todos, function(todo) {
									count += todo.done ? 0 : 1;
								});
								return count;
							};
					
							todoList.archive = function() {
								var oldTodos = todoList.todos;
								todoList.todos = [];
								angular.forEach(oldTodos, function(todo) {
									if (!todo.done)
										todoList.todos.push(todo);
								});
							};
					
						});
					});
      			</pre>
			</div>
		</div>
	</div>
	<div class="panel panel-default">
		<div class="panel-heading" role="tab" id="headingHigh">
			<h4 class="panel-title">
				<a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseHigh"
					aria-expanded="false" aria-controls="collapseHigh"> Highcharts </a>
			</h4>
		</div>
		<div id="collapseHigh" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingHigh">
			<div class="panel-body">
				<p>
					<t:pagelink page="Highcharts" class="btn btn-primary btn-large">Run Highcharts &raquo;</t:pagelink>
				</p>
				FREE FOR NON-COMMERCIAL. See <a href="http://shop.highsoft.com/highcharts.html" target="_blank">License and
					Pricing</a>.
				<ul>
					<li>Download <em>highcharts.js</em> from <a href="http://www.highcharts.com" target="_blank">http://www.highcharts.com</a>
						and place the file in <em>src/main/resources/META-INF/modules/highcharts.js</em>. The example is using version
						4.1.8
					</li>
					<li>Create a file <em>src/main/resources/META-INF/modules/my-highcharts-code.js</em> which is your highcharts
						code
					</li>
					<li>Import <em>highcharts.js</em> and <em>my-highcharts-code.js</em> in your class-file: 
						<span class="badge"><em>@Import(module = { "highcharts", "my-highcharts-code" })</em></span>
					</li>
				</ul>
				<p>
					That's it! Hava a look at the source-code for <span class="badge"><em>my-highcharts-code.js</em></span>
				</p>
				<pre class="prettyprint linenums">
					define([ "jquery", "highcharts" ], function($) {
						$(function() {
							var tag = $('#compare');
							var dataTapestry = tag.attr("valueTapestry");
							var dataAngular = tag.attr("valueAngular");
							var dataHighcharts = tag.attr("valueHighcharts");
							var category = tag.attr("category");
					
							var myArray = [];
							myArray.push(parseInt(dataTapestry));
							myArray.push(parseInt(dataAngular));
							myArray.push(parseInt(dataHighcharts));
					
							$('#compare').highcharts(
									{
										chart : {
											backgroundColor : {
												linearGradient : [ 0, 0, 500, 500 ],
												stops : [ [ 0, 'rgb(255, 255, 255)' ],
														[ 1, 'rgb(200, 200, 255)' ] ]
											},
											type : 'bar'
										},
										title : {
											text : 'Comparing...'
										},
										xAxis : {
											categories : [ 'Tapestry', 'Angular', 'Highcharts' ]
										},
										plotOptions : {
											series : {
												colorByPoint : true
											}
										},
										yAxis : {
											title : {
												text : 'Popularity'
											}
										},
										series : [ {
											name : category,
											data : myArray
										} ]
									});
						});
					})
      			</pre>
			</div>
		</div>
	</div>
	<div class="panel panel-default">
		<div class="panel-heading" role="tab" id="headingJchart">
			<h4 class="panel-title">
				<a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseJchart"
					aria-expanded="false" aria-controls="collapseJchart"> JChart </a>
			</h4>
		</div>
		<div id="collapseJchart" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingJchart">
			<div class="panel-body">
				<p>
					<t:pagelink page="Jchart" class="btn btn-primary btn-large">Run Jchart &raquo;</t:pagelink>
				</p>
				<ul>
					<li>Download <em>jchart.js</em> from <a href="https://github.com/ldenison/jchart" target="_blank">https://github.com/ldenison/jchart</a>
						and place the file in <em>src/main/resources/META-INF/modules/jchart.js</em>. 
						Edit the file and insert <code>define(["jquery", "bootstrap/tooltip"], function($, tooltip) {</code> as the first line. 
						After the last line insert <code>})</code>. The example is using the latest version
					</li>
					<li>Download <em>main.css</em> from <a href="https://github.com/ldenison/jchart" target="_blank">https://github.com/ldenison/jchart</a>
						and place the file in <em>src/main/resources/META-INF/assets/main.css</em>.
					</li>
					<li>Create a file <em>src/main/resources/META-INF/modules/my-jchart-code.js</em> which is your jchart code</li>
					<li>Import <em>jchart.js</em> and <em>my-jchart-code.js</em> and <em>main.css</em> in your class-file: 
						<span class="badge"><em>@Import(module = { "jchart", "my-jchart-code" }, stylesheet = { "main.css" })</em></span>
					</li>
				</ul>
				<p>
					That's it! Hava a look at the source-code for <span class="badge"><em>my-jchart-code.js</em></span>
				</p>
				<pre class="prettyprint linenums">
					define([ "jquery", "jchart" ], function($) {
					
						$(function() {
							$("#compare").jChart({
								x_label : "Popularity"
							});
						});
					
					})
				</pre>
			</div>
		</div>
	</div>
	<div class="panel panel-default">
		<div class="panel-heading" role="tab" id="headingRaph">
			<h4 class="panel-title">
				<a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseRaph"
					aria-expanded="false" aria-controls="collapseRaph"> Raphael </a>
			</h4>
		</div>
		<div id="collapseRaph" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingRaph">
			<div class="panel-body">
				<p>
					<t:pagelink page="Raphael" class="btn btn-primary btn-large">Run Raphael &raquo;</t:pagelink>
				</p>
				<ul>
					<li>Download <em>raphael.js</em> from <a href="http://raphaeljs.com/" target="_blank">http://raphaeljs.com</a>
						and place the file in <em>src/main/resources/META-INF/modules/raphael.js</em>.
						The example is using version 2.1.2
					</li>
					<li>Download <em>g.raphael.js</em> from <a href="http://g.raphaeljs.com/" target="_blank">http://g.raphaeljs.com</a> 
						and place the file in <em>src/main/resources/META-INF/modules/g.raphael.js</em>.
						The example is using version 0.5.1
					</li>
					<li>Download <em>g.bar.js</em> from <a href="http://g.raphaeljs.com/" target="_blank">http://g.raphaeljs.com</a> 
						and place the file in <em>src/main/resources/META-INF/modules/g.bar.js</em>.
						The example is using version 0.5.1
					</li>
					<li>Create a file <em>src/main/resources/META-INF/modules/my-raphael-code.js</em> which is your raphael code.
						This file imports <em>raphael</em>, <em>g.raphael</em> and <em>g.bar</em>.
					</li>
					<li>Import <em>my-raphael-code.js</em> in your class-file: 
						<span class="badge"><em>@Import(module = { "my-raphael-code" })</em></span></li>
				</ul>
				<p>
					That's it! Hava a look at the source-code for <span class="badge"><em>my-raphael-code.js</em></span>
				</p>
				<br />
				<pre class="prettyprint linenums">
					require([ "raphael" ], function(Raphael) { require([ "g.raphael" ], function() { require([ "g.bar" ], function() {
						var containerbar = document.getElementById("compare");
						var paper = Raphael(containerbar, 550, 250);
						var rect = paper.rect(0, 0, 550, 250);
						rect.attr({
							fill : '#d8d8ff'
						});
					
						    fin = function () {
						        this.flag = paper.popup(this.bar.x, this.bar.y, this.bar.value || "0").insertBefore(this);
						    },
						    fout = function () {
						        this.flag.animate({opacity: 0}, 300, function () {this.remove();});
						    },
						    txtattr = { font: "18px 'Fontin Sans', Fontin-Sans, sans-serif" };
					
						var dataTapestry = parseInt(containerbar.getAttribute("valueTapestry"));
						var dataAngular = parseInt(containerbar.getAttribute("valueAngular"));
						var dataRaphael = parseInt(containerbar.getAttribute("valueHighcharts"));
						var category = containerbar.getAttribute("category");
					
					    var barCategory = paper.hbarchart(100, 40, 400, 200, [[dataTapestry], [dataAngular], [dataRaphael]]).hover(fin, fout);
					    
						var textCategory = 	paper.text(250, 20, "Comparing...").attr({ font: "16px sans-serif" });
						var footerCategory = paper.text(250, 235, "Popularity").attr({ font: "12px sans-serif" });
						var labelTap = 	paper.text(50, 90, "Tapestry").attr({ font: "14px sans-serif" });
						var labelAng = 	paper.text(50, 135, "Angular").attr({ font: "14px sans-serif" });
						var labelRap = 	paper.text(50, 180, "Raphael").attr({ font: "14px sans-serif" });
						
						var group = paper.set();
						group.push(barCategory, textCategory, labelTap, labelAng, labelRap);
					
					});});}); // after tree require	
				</pre>
			</div>
		</div>
	</div>

</div> <!-- class="panel-group" -->

</html>
